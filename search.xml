<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>I创杯比赛官网漏洞挖掘</title>
      <link href="/posts/d21575e2/"/>
      <url>/posts/d21575e2/</url>
      
        <content type="html"><![CDATA[<h1 id="一-I创杯比赛官网漏洞挖掘"><a href="#一-I创杯比赛官网漏洞挖掘" class="headerlink" title="一.I创杯比赛官网漏洞挖掘"></a>一.I创杯比赛官网漏洞挖掘</h1><h2 id="1-外围打点"><a href="#1-外围打点" class="headerlink" title="1.外围打点"></a>1.外围打点</h2><p>针对该系统进行信息收集，子域名，端口开放，脚本语言，服务器类型，中间件类型，包括官网里的公众号（经验证，公众号和网站一致），敏感目录扫描等等。</p><h2 id="2-逐个测试"><a href="#2-逐个测试" class="headerlink" title="2.逐个测试"></a>2.逐个测试</h2><p>前期的信息收集完毕，着手针对系统进行测试，findsomething发现了几个带参数id的url，尝试进行SQL注入。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823183801895.png" alt="1"></p><p>单引号测试一下直接拦截，不断fuzz看看到底是哪个参数被拦截了……然后由于站点的waf以及防护策略就此作罢。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823184109448.png" alt="2"></p><p>继续测试别的点，经测试，xss被拦截，..&#x2F;..&#x2F;..&#x2F;被拦截。几乎所有涉及到敏感操作的都会被拦截，继续测逻辑。</p><h2 id="3-柳暗花明"><a href="#3-柳暗花明" class="headerlink" title="3.柳暗花明"></a>3.柳暗花明</h2><p>因为是个报名网站，所以难免有注册登陆以及找回密码等选项，试试能否挖出来逻辑洞。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823184736113.png" alt="3"></p><p>注册登陆之后，测一下越权&#x2F;未授权等等。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823184839269.png" alt="4"></p><p>基于sessionid做鉴权，暂无越权什么的，个人信息更新框也用了正则杜绝特殊字符的输入。<br>尝试退出，在找回密码处测试验证码回显、密码找回等漏洞，发现验证码功能没办法正常使用，于是继续进入个人中心页面，发现个人中心的URL有些不一样，尝试删除目录，逐级往前，然后出来了一个活动报名界面。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823185312390.png" alt="5"></p><p>点击进入，页面跳转，来到一个报名处，点击参赛报名，然后填写个人信息，按照要求一步一步填写，在第二个步骤界面，出现了一个上传点。</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823185622773.png" alt="6"></p><p>好家伙，终于来了，但是无奈的是上传不了脚本文件，白名单限制了，绕不过去。但是可以正常上传图片等类型。还可以进行图片预览与删除。</p><h2 id="4-文件删除漏洞x1"><a href="#4-文件删除漏洞x1" class="headerlink" title="4.文件删除漏洞x1"></a>4.文件删除漏洞x1</h2><p>在删除图片的时候，bp抓到的包，其中一个Key参数很可疑，type是文件操作类型</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823190012154.png" alt="7"></p><p>将数据包发送到repeater界面重放：</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823190241880.png" alt="8"></p><p>第一次放包是获取上传图片的名称与Key的值，第二次重放是进行删除操作：</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823190531537.png" alt="9"></p><p>尝试访问图片得到404，删除成功，更改Key的值进行尝试，文件删除漏洞x1</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823190653151.png" alt="10"></p><h2 id="5-JS审计再出洞"><a href="#5-JS审计再出洞" class="headerlink" title="5.JS审计再出洞"></a>5.JS审计再出洞</h2><p>既然已经挖到了一个接口存在文件删除，那就继续挖下去。查看网站源代码，发现了又一处接口：</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823191042611.png" alt="11">    </p><p>这个Key似曾相识啊，这不就是刚刚的文件删除的参数么，看代码意思为展示图片（文件)的意思，于是将刚刚获取到的文件Key值进行拼接操作，文件下载x1：</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823191358799.png" alt="12"></p><p>根据图片中给出的json数据可以得知文件下载的URL需要一个ID值，猜测这个ID值就是Key&#x3D;IDxxxx中的xxxx，继续构造URL进行测试，于是：</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823191742221.png" alt="13"></p><p>此时可遍历ID值进行文件下载，由于参赛报名涉及到实名制（个人身份证等图片)，不再放出。</p><h2 id="6-转换思路-未授权到手"><a href="#6-转换思路-未授权到手" class="headerlink" title="6.转换思路-未授权到手"></a>6.转换思路-未授权到手</h2><p>不管是刚刚的删除文件操作还是下载文件，网站URL路径中都有一个SessionID参数，不妨尝试一下删除SessionID参数值进行未授权操作，未授权x1</p><p><img src="https://huc-1259038394.cos.ap-chengdu.myqcloud.com/picture/image-20220823192412621.png" alt="14"></p><p>此处仍可遍历Key的值来进行未授权访问，Key表示文件（图片）的标识，未授权下方给出的是（图片）文件的URL，直接访问可得到敏感信息（包括身份证等信息)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnerability-mining</title>
      <link href="/posts/a522f3d4/"/>
      <url>/posts/a522f3d4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
